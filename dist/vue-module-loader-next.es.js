let e;const t={};async function n(e,t){try{const n=new t;await n.create(e)}catch(n){console.log(n)}}function r(r){return async function(o){if("create"in o)await n(r,o);else{const i=o.map((n=>function(n,r){if(!r)return n();if(void 0===e){const t=document.createElement("link").relList;e=t&&t.supports&&t.supports("modulepreload")?"modulepreload":"preload"}return Promise.all(r.map((n=>{if(n in t)return;t[n]=!0;const r=n.endsWith(".css"),o=r?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${n}"]${o}`))return;const i=document.createElement("link");return i.rel=r?"stylesheet":e,r||(i.as="script",i.crossOrigin=""),i.href=n,document.head.appendChild(i),r?new Promise(((e,t)=>{i.addEventListener("load",e),i.addEventListener("error",t)})):void 0}))).then((()=>n()))}((()=>import(n)),void 0)));for await(let e of i)e.default.constructor&&await n(r,e.default)}}}function o(e,t={}){e.config.globalProperties.$loader=r(e)}export default o;
